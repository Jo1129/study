
1.실행계획

explain plan for

select * from emp where sal like '30%';





2.group by 할때
null은 포함 안하기 때문에 nvl 이용


3.rank
select ename , job , sal , rank() over (order by sal desc ) -- 월급 내림차순대로 순위 랭크해라
from emp
where job in ( 'ANALYST' , 'MANAGER')



select ename , deptno , sal , dense_rank() over (order by sal desc )   -- rank() over 는 1 1 3    dense_rank() 는 1 1 2 
from emp
where deptno = 20

select job , ename , sal , dense_rank() over (partition by job order by sal desc)  -- 직업별로 각각 partition by   group by 같은거
from emp


select dense_rank(2975) within group(order by sal desc) -- 순위 월급을 높은 순위로 정렬해놓은 그룹 안에 2975인 값이 몇위
from emp

select ename , job , sal  , ntile(4) over (order by sal desc) 등급 -- sal 등급 4로 나누기
from emp

select ename , hiredate  , ntile(5) over (order by hiredate asc) -- 입사한 순서대로 5등급 나누기
from emp


select ename , sal , dense_rank() over (order by sal desc) 순위 , 
                    round(cume_dist() over (order by sal desc) , 2) 비율 -- over뜻 확장하다  순위별 백분율
from emp

select deptno , ename , sal ,  
        cume_dist() over (partition by deptno order by sal desc) 순위  -- 부서번호 별로 각각 월급 비율
from emp

4. 데이터 가로 출력 listagg

select deptno , 
       listagg(ename, ',') within group (order by ename asc) as 이름   -- 부서번호별로 사원이름 출력
from emp
group by deptno;       -- group by 꼭 필요  

select job , 
      listagg(ename , ',') WITHIN group ( order by sal desc ) as 이름
from emp
group by job;       -- group by 꼭 필요  



5. 바로 전행과 다음행 출력하기 LAG 이전행 , LEAD 다음행

select empno , ename ,sal , lag(sal , 1) over (order by sal asc) 전행,  -- 전행 1 전전행2 
                            lead(sal , 1) over (order by sal asc) 다음행
from emp

select ename , hiredate , 
        hiredate - lag(hiredate , 1) over (order by hiredate asc) as 간격,   -- 전입사자랑 비교 일 유용할거같음
        lead(hiredate , 1) over (order by hiredate asc)
        from emp


6. 가로세로 변경 decode

select deptno , sum(sal)
from emp
group by deptno;

select sum(decode(deptno , 10 , sal )) as "10",
       sum(decode(deptno , 20 , sal )) as "20",
       sum(decode(deptno , 30 , sal )) as "30"
from emp;


select * from
( select deptno , sal from emp ) 
pivot ( sum(sal) for deptno in (10 , 20 , 30) );



SELECT *
 FROM order2
 UNPIVOT ( 건수 for 아이템 in ( BICYCLE, CAMERA, NOTEBOOK ) );


7. sum over
select empno, deptno ,  ename , sal,  sum(sal) over(order by empno asc) 누적치
from emp


select empno, deptno ,  ename , sal,  sum(sal) over(order by empno rows between unbounded preceding  -- 제일 첫번째 행
                                                                and current row) 누적치           -- 현재행
from emp

--비율
select empno , ename , sal , ratio_to_report(sal) over() 비율  -- 원형그래프 참고 비율 컬럼 보여줌
from emp

-- 전체 금액
select deptno , sum(sal)
from emp 
group by deptno

union all 

select to_number(null) as deptno ,sum(sal)
from emp

order by deptno asc

-- 함수이용시
select deptno , sum(sal)
from emp
group by rollup(deptno); -- 맨 하단행에 전체 합계


select deptno , sum(sal)
from emp
group by CUBE(deptno);  -- 맨 상단에 전체 합계

select to_char(hiredate, 'RRRR') , sum(sal)
from emp
group by CUBE(to_char(hiredate, 'RRRR'))


--그룹핑 
select deptno , job , sum(sal)
from emp
group by grouping sets ( (deptno) , 
                         (job) , 
                          ())   --전체

select to_char(hiredate, 'RRRR') , job,  sum(sal)
from emp
group by grouping sets ( (to_char(hiredate , 'RRRR')) , (job)  )

--넘버링 row_number
select empno , ename ,sal , rank() over(order by sal desc)as rank , 
                           dense_rank() over(order by sal desc) as dense_rank  ,
                          row_number() over(order by sal desc)번호
from emp

--정렬 rownum
select ename , sal , row_number() over(order by ename desc) 
from emp
where sal between 1000 and 3000;


select rownum  , empno , ename , job , sal
from emp
where rownum <=5

-- simple top-n queries
select empno , ename , job , sal 
from emp
order by sal desc fetch first 4 rows only;



--union all 중복제거x 
--UNION 사용 시 중복을 제거하기 위하여 데이터를 모두 검사하기 때문에 속도가 느리다.
select deptno , sum(sal)
from emp 
group by deptno

union all 

select to_number(null) as deptno ,sum(sal)
from emp

order by deptno asc


-- 교집합 intersect

select ename,sal,job,deptno
from emp 
where deptno in  (10,20)


intersect 

select ename,sal,job,deptno
from emp 
where deptno in  (20,30)



--차집합 A-B 

select ename,sal,job,deptno
from emp 
where deptno in (10,20)

MINUS 

select ename,sal,job,deptno
from emp 
where deptno in (20,30)


-- 단일행 서브쿼리 : 서브에서 메인쿼리로 하나의 값 리턴  = != ^= <> > < >= <=

select ename , sal
from emp
where sal >
(select sal
from emp 
where ename = 'JONES')     -- 결과값이 단일


-- 다중행 서브쿼리  : 서브에서 메인쿼리로 다중 값 리턴  in not in >all <all >any <any
select ename , sal
from emp
where sal in                 -- =은 안됨 다중행 서브쿼리
(select sal
from emp 
where job = 'SALESMAN')    -- 결과값이 다행


-- not in 다중행 서브쿼리에 null이 있으면 출력이 안됨 T and T and null
select ename , mgr
from emp
where empno  not in ( 
select mgr from emp )

select ename , mgr
from emp
where empno  not in ( 
select mgr from emp
where mgr is not null )  -- is not null

select ename , mgr
from emp
where empno  not in ( 
select nvl(mgr, -1) 
        from emp
where mgr is not null )  

-- exits  메인쿼리부터 수행

select *
from dept d -- 1. deptno 10
where  exists ( select * from emp e where e.deptno = d.deptno  )  -- 2. deptno 10 비교

select *
from dept d -- 1. deptno 10
where  not exists ( select * from emp e where e.deptno = d.deptno  )



-- 그룹함수 검색조건 having 서브쿼리
select job , sum(sal)
from emp
group by job
having sum(sal) >=
(

select sum(sal)
from emp
where job = 'SALESMAN'

 )


select ename , hiredate
from (
        select  ename , hiredate , rank() over(order by hiredate asc) rnk
        from emp
        where job = 'SALESMAN' )
where rnk = 1



-이거 실행안됨
select ename ,  -- 다중행
sal ,      --다중행
max(sal) , -- 단일행
 min(sal)

select ename , 
sal , 
(
        select  max(sal) 
        from emp
        where job = 'SALESMAN' ) ,
(
        select  min(sal) 
        from emp
        where job = 'SALESMAN' )

from emp
where job = 'SALESMAN'


select 서브
from 서브
where 서브
group by 서브x
having 서브
order by 서브
 

 -- merge

merge into emp e
using dept d
on ( e.deptno = d.deptno ) 
when matched then
update set e.loc = d.loc


merge into emp e
using dept d                --dept 사용
on ( e.deptno = d.deptno )   -- e.deptno 와 같다면
when matched then            -- 매치가되면 
update set e.loc = d.loc
when not matched then
insert (e.empno , e.deptno , e.loc) values (1111 , d.deptno , d.loc);


--select for update   select 조회중에 rock 걸기 갱신 못하게

-- insert 서브쿼리

create table emp2 as
select * from emp
where 1=2   --데이터 안넣음 


insert into emp2(empno , ename , sal ,deptno)
select empno , ename , sal ,deptno
from emp
where deptno = 10


-- update 서브쿼리
update emp
set sal  = ( select sal 
                from emp 
                where ename = 'ALLEN' )
where job = 'SALEMAN'

-- delete 서브쿼리
delete from emp
where sal > ( select sal from emp where ename = 'SCOTT')

--merge 서브쿼리
merge into dept d
using (  select deptno , sum(sal) as sunsal
from emp
group by deptno ) v
on ( d.deptno = v.deptno )
when matched then 
update set d.sumsal =  v.sunsal


-- 계층형 

select empno , rpad(' ' , level*3) || ename , sal , job , mgr 
from emp
START WITH ename = 'KING'
connect by prior empno = mgr


select empno , rpad(' ' , level*3) || ename , sal , job , mgr , level
from emp
where level = 2
START WITH ename = 'KING'
connect by prior empno = mgr 



select empno , rpad(' ' , level*3) || ename , sal , job , mgr , level
from emp
START WITH ename = 'KING'
connect by prior empno = mgr and ename != 'BLAKE'       -- 하위 모두 제거

--계층형 order siblings by 

select ename , level , sal  , lpad(' ' , level*2)||ename , job from emp
START WITH ename = 'KING'
CONNECT BY PRIOR empno = mgr 
order siblings by sal desc


select ename , level , sal  , lpad(' ' , level*2)||ename , job from emp
start with ename = 'BLAKE'
connect by PRIOR empno = mgr  
order SIBLINGS by sal asc

--계층형 가로 sys_connect_by_pat
select ename , sys_connect_by_path(ename , '/') as path
from emp
start with ename = 'KING'
CONNECT by prior empno = mgr;

-- 임시테이블 생성 commit 시 데이터 삭제

create global TEMPORARY table emp37(
EMPNO number(10) ,
ENAME varchar2(20),
SAL   number(10,2),
HIREDATE  date )
on commit delete rows -- 커밋하면 데이터 지워라
on commit preserve rows -- 세션을 종료하면 데이터를 지워라

-- view

create view emp_view 
as 
 select * from emp
 where job = 'MANAGER';


-- rowid
select rowid , empno , ename 
from emp

파일번호+ 블록번호 + rowid 물리적주소

-- index rowid
select sal , rowid
from emp
where sal >= 0;

파일번호+ 블록번호 + rowid 물리적주소

--sequence

create sequence seq2
start with 1
maxvalue 100
INCREMENT by 1
nocycle;           --싸이클 없다